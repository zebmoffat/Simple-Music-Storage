// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/database_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseManagementService_ListTableNames_FullMethodName  = "/databasemanagement.DatabaseManagementService/ListTableNames"
	DatabaseManagementService_DropAllTables_FullMethodName   = "/databasemanagement.DatabaseManagementService/DropAllTables"
	DatabaseManagementService_CreateAllTables_FullMethodName = "/databasemanagement.DatabaseManagementService/CreateAllTables"
	DatabaseManagementService_PrintTable_FullMethodName      = "/databasemanagement.DatabaseManagementService/PrintTable"
	DatabaseManagementService_ExecuteSql_FullMethodName      = "/databasemanagement.DatabaseManagementService/ExecuteSql"
)

// DatabaseManagementServiceClient is the client API for DatabaseManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseManagementServiceClient interface {
	// Print the contents of a specific table
	ListTableNames(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*TableNamesResponse, error)
	// Drop all tables in the database
	DropAllTables(ctx context.Context, in *DropAllTablesRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// Create all tables in the database
	CreateAllTables(ctx context.Context, in *CreateAllTablesRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// Print a table in the database
	PrintTable(ctx context.Context, in *StringCommandRequest, opts ...grpc.CallOption) (*TableContentResponse, error)
	// Execute raw sql into the database
	ExecuteSql(ctx context.Context, in *StringCommandRequest, opts ...grpc.CallOption) (*OperationResponse, error)
}

type databaseManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseManagementServiceClient(cc grpc.ClientConnInterface) DatabaseManagementServiceClient {
	return &databaseManagementServiceClient{cc}
}

func (c *databaseManagementServiceClient) ListTableNames(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*TableNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableNamesResponse)
	err := c.cc.Invoke(ctx, DatabaseManagementService_ListTableNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseManagementServiceClient) DropAllTables(ctx context.Context, in *DropAllTablesRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, DatabaseManagementService_DropAllTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseManagementServiceClient) CreateAllTables(ctx context.Context, in *CreateAllTablesRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, DatabaseManagementService_CreateAllTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseManagementServiceClient) PrintTable(ctx context.Context, in *StringCommandRequest, opts ...grpc.CallOption) (*TableContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableContentResponse)
	err := c.cc.Invoke(ctx, DatabaseManagementService_PrintTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseManagementServiceClient) ExecuteSql(ctx context.Context, in *StringCommandRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, DatabaseManagementService_ExecuteSql_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseManagementServiceServer is the server API for DatabaseManagementService service.
// All implementations must embed UnimplementedDatabaseManagementServiceServer
// for forward compatibility.
type DatabaseManagementServiceServer interface {
	// Print the contents of a specific table
	ListTableNames(context.Context, *ListTablesRequest) (*TableNamesResponse, error)
	// Drop all tables in the database
	DropAllTables(context.Context, *DropAllTablesRequest) (*OperationResponse, error)
	// Create all tables in the database
	CreateAllTables(context.Context, *CreateAllTablesRequest) (*OperationResponse, error)
	// Print a table in the database
	PrintTable(context.Context, *StringCommandRequest) (*TableContentResponse, error)
	// Execute raw sql into the database
	ExecuteSql(context.Context, *StringCommandRequest) (*OperationResponse, error)
	mustEmbedUnimplementedDatabaseManagementServiceServer()
}

// UnimplementedDatabaseManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseManagementServiceServer struct{}

func (UnimplementedDatabaseManagementServiceServer) ListTableNames(context.Context, *ListTablesRequest) (*TableNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTableNames not implemented")
}
func (UnimplementedDatabaseManagementServiceServer) DropAllTables(context.Context, *DropAllTablesRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropAllTables not implemented")
}
func (UnimplementedDatabaseManagementServiceServer) CreateAllTables(context.Context, *CreateAllTablesRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllTables not implemented")
}
func (UnimplementedDatabaseManagementServiceServer) PrintTable(context.Context, *StringCommandRequest) (*TableContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintTable not implemented")
}
func (UnimplementedDatabaseManagementServiceServer) ExecuteSql(context.Context, *StringCommandRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSql not implemented")
}
func (UnimplementedDatabaseManagementServiceServer) mustEmbedUnimplementedDatabaseManagementServiceServer() {
}
func (UnimplementedDatabaseManagementServiceServer) testEmbeddedByValue() {}

// UnsafeDatabaseManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseManagementServiceServer will
// result in compilation errors.
type UnsafeDatabaseManagementServiceServer interface {
	mustEmbedUnimplementedDatabaseManagementServiceServer()
}

func RegisterDatabaseManagementServiceServer(s grpc.ServiceRegistrar, srv DatabaseManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseManagementService_ServiceDesc, srv)
}

func _DatabaseManagementService_ListTableNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseManagementServiceServer).ListTableNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseManagementService_ListTableNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseManagementServiceServer).ListTableNames(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseManagementService_DropAllTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropAllTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseManagementServiceServer).DropAllTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseManagementService_DropAllTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseManagementServiceServer).DropAllTables(ctx, req.(*DropAllTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseManagementService_CreateAllTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAllTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseManagementServiceServer).CreateAllTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseManagementService_CreateAllTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseManagementServiceServer).CreateAllTables(ctx, req.(*CreateAllTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseManagementService_PrintTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseManagementServiceServer).PrintTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseManagementService_PrintTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseManagementServiceServer).PrintTable(ctx, req.(*StringCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseManagementService_ExecuteSql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseManagementServiceServer).ExecuteSql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseManagementService_ExecuteSql_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseManagementServiceServer).ExecuteSql(ctx, req.(*StringCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseManagementService_ServiceDesc is the grpc.ServiceDesc for DatabaseManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "databasemanagement.DatabaseManagementService",
	HandlerType: (*DatabaseManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTableNames",
			Handler:    _DatabaseManagementService_ListTableNames_Handler,
		},
		{
			MethodName: "DropAllTables",
			Handler:    _DatabaseManagementService_DropAllTables_Handler,
		},
		{
			MethodName: "CreateAllTables",
			Handler:    _DatabaseManagementService_CreateAllTables_Handler,
		},
		{
			MethodName: "PrintTable",
			Handler:    _DatabaseManagementService_PrintTable_Handler,
		},
		{
			MethodName: "ExecuteSql",
			Handler:    _DatabaseManagementService_ExecuteSql_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/database_service.proto",
}
